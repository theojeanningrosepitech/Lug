{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import{Platform}from'@unimodules/react-native-adapter';import Constants,{ExecutionEnvironment}from'expo-constants';import*as Linking from'expo-linking';import{resolveScheme}from'expo-linking/build/Schemes';import qs from'qs';var manifest=Constants.manifest;export var SessionUrlProvider=function(){function SessionUrlProvider(){_classCallCheck(this,SessionUrlProvider);}_createClass(SessionUrlProvider,[{key:\"getDefaultReturnUrl\",value:function getDefaultReturnUrl(urlPath,options){var _options$scheme;var queryParams=SessionUrlProvider.getHostAddressQueryParams();var path=SessionUrlProvider.SESSION_PATH;if(urlPath){path=[path,SessionUrlProvider.removeLeadingSlash(urlPath)].filter(Boolean).join('/');}return Linking.createURL(path,{scheme:(_options$scheme=options==null?void 0:options.scheme)!=null?_options$scheme:resolveScheme({isSilent:true}),queryParams:queryParams,isTripleSlashed:options==null?void 0:options.isTripleSlashed});}},{key:\"getStartUrl\",value:function getStartUrl(authUrl,returnUrl){if(Platform.OS==='web'&&!Platform.isDOMAvailable){return'';}var queryString=qs.stringify({authUrl:authUrl,returnUrl:returnUrl});return this.getRedirectUrl()+\"/start?\"+queryString;}},{key:\"getRedirectUrl\",value:function getRedirectUrl(urlPath){if(Platform.OS==='web'){if(Platform.isDOMAvailable){return[window.location.origin,urlPath].filter(Boolean).join('/');}else{return'';}}var legacyExpoProjectId=manifest.currentFullName||manifest.id;if(!legacyExpoProjectId){var nextSteps='';if(__DEV__){if(Constants.executionEnvironment===ExecutionEnvironment.Bare){nextSteps=' Please ensure you have the latest version of expo-constants installed and rebuild your native app. You can verify that currentFullName is defined by running `expo config --type public` and inspecting the output.';}else if(Constants.executionEnvironment===ExecutionEnvironment.StoreClient){nextSteps=' Please report this as a bug with the contents of `expo config --type public`.';}}throw new Error('Cannot use AuthSession proxy because the project ID is not defined.'+nextSteps);}var redirectUrl=SessionUrlProvider.BASE_URL+\"/\"+legacyExpoProjectId;if(__DEV__){SessionUrlProvider.warnIfAnonymous(legacyExpoProjectId,redirectUrl);}return redirectUrl;}}],[{key:\"getHostAddressQueryParams\",value:function getHostAddressQueryParams(){var _Constants$manifest,_hostUri;var hostUri=(_Constants$manifest=Constants.manifest)==null?void 0:_Constants$manifest.hostUri;if(!hostUri&&(ExecutionEnvironment.StoreClient===Constants.executionEnvironment||resolveScheme({}))){if(!Constants.linkingUri){hostUri='';}else{hostUri=SessionUrlProvider.removeScheme(Constants.linkingUri).replace(/\\/--(\\/.*)?$/,'');}}var uriParts=(_hostUri=hostUri)==null?void 0:_hostUri.split('?');try{return qs.parse(uriParts==null?void 0:uriParts[1]);}catch(_unused){}return undefined;}},{key:\"warnIfAnonymous\",value:function warnIfAnonymous(id,url){if(id.startsWith('@anonymous/')){console.warn(\"You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \\\"\"+url+\"\\\". If you are using an OAuth provider that requires adding redirect URLs to an allow list, we recommend that you do not add this URL -- instead, you should sign in to Expo to acquire a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.\");}}},{key:\"removeScheme\",value:function removeScheme(url){return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//,'');}},{key:\"removeLeadingSlash\",value:function removeLeadingSlash(url){return url.replace(/^\\//,'');}}]);return SessionUrlProvider;}();SessionUrlProvider.BASE_URL=\"https://auth.expo.io\";SessionUrlProvider.SESSION_PATH='expo-auth-session';export default new SessionUrlProvider();","map":{"version":3,"sources":["../src/SessionUrlProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from '@unimodules/react-native-adapter';\nimport Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { CreateURLOptions } from 'expo-linking';\nimport { resolveScheme } from 'expo-linking/build/Schemes';\nimport qs, { ParsedQs } from 'qs';\n\nconst { manifest } = Constants;\n\nexport class SessionUrlProvider {\n  private static readonly BASE_URL = `https://auth.expo.io`;\n  private static readonly SESSION_PATH = 'expo-auth-session';\n\n  getDefaultReturnUrl(urlPath?: string, options?: Omit<CreateURLOptions, 'queryParams'>): string {\n    const queryParams = SessionUrlProvider.getHostAddressQueryParams();\n    let path = SessionUrlProvider.SESSION_PATH;\n    if (urlPath) {\n      path = [path, SessionUrlProvider.removeLeadingSlash(urlPath)].filter(Boolean).join('/');\n    }\n\n    return Linking.createURL(path, {\n      // The redirect URL doesn't matter for the proxy as long as it's valid, so silence warnings if needed.\n      scheme: options?.scheme ?? resolveScheme({ isSilent: true }),\n      queryParams,\n      isTripleSlashed: options?.isTripleSlashed,\n    });\n  }\n\n  getStartUrl(authUrl: string, returnUrl: string): string {\n    if (Platform.OS === 'web' && !Platform.isDOMAvailable) {\n      // Return nothing in SSR envs\n      return '';\n    }\n    const queryString = qs.stringify({\n      authUrl,\n      returnUrl,\n    });\n\n    return `${this.getRedirectUrl()}/start?${queryString}`;\n  }\n\n  getRedirectUrl(urlPath?: string): string {\n    if (Platform.OS === 'web') {\n      if (Platform.isDOMAvailable) {\n        return [window.location.origin, urlPath].filter(Boolean).join('/');\n      } else {\n        // Return nothing in SSR envs\n        return '';\n      }\n    }\n\n    const legacyExpoProjectId = manifest.currentFullName || manifest.id;\n\n    if (!legacyExpoProjectId) {\n      let nextSteps = '';\n      if (__DEV__) {\n        if (Constants.executionEnvironment === ExecutionEnvironment.Bare) {\n          nextSteps =\n            ' Please ensure you have the latest version of expo-constants installed and rebuild your native app. You can verify that currentFullName is defined by running `expo config --type public` and inspecting the output.';\n        } else if (Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n          nextSteps =\n            ' Please report this as a bug with the contents of `expo config --type public`.';\n        }\n      }\n      throw new Error(\n        'Cannot use AuthSession proxy because the project ID is not defined.' + nextSteps\n      );\n    }\n\n    const redirectUrl = `${SessionUrlProvider.BASE_URL}/${legacyExpoProjectId}`;\n    if (__DEV__) {\n      SessionUrlProvider.warnIfAnonymous(legacyExpoProjectId, redirectUrl);\n      // TODO: Verify with the dev server that the manifest is up to date.\n    }\n    return redirectUrl;\n  }\n\n  private static getHostAddressQueryParams(): ParsedQs | undefined {\n    let hostUri: string = Constants.manifest?.hostUri;\n    if (\n      !hostUri &&\n      (ExecutionEnvironment.StoreClient === Constants.executionEnvironment || resolveScheme({}))\n    ) {\n      if (!Constants.linkingUri) {\n        hostUri = '';\n      } else {\n        // we're probably not using up-to-date xdl, so just fake it for now\n        // we have to remove the /--/ on the end since this will be inserted again later\n        hostUri = SessionUrlProvider.removeScheme(Constants.linkingUri).replace(/\\/--(\\/.*)?$/, '');\n      }\n    }\n\n    const uriParts = hostUri?.split('?');\n    try {\n      return qs.parse(uriParts?.[1]);\n    } catch {}\n\n    return undefined;\n  }\n\n  private static warnIfAnonymous(id, url): void {\n    if (id.startsWith('@anonymous/')) {\n      console.warn(\n        `You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \"${url}\". If you are using an OAuth provider that requires adding redirect URLs to an allow list, we recommend that you do not add this URL -- instead, you should sign in to Expo to acquire a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.`\n      );\n    }\n  }\n\n  private static removeScheme(url: string) {\n    return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n  }\n\n  private static removeLeadingSlash(url: string) {\n    return url.replace(/^\\//, '');\n  }\n}\n\nexport default new SessionUrlProvider();\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}