{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import React from'react';import NativeAppLoading from\"./AppLoadingNativeWrapper\";var AppLoading=function(_React$Component){_inherits(AppLoading,_React$Component);var _super=_createSuper(AppLoading);function AppLoading(){var _this;_classCallCheck(this,AppLoading);_this=_super.apply(this,arguments);_this._isMounted=false;return _this;}_createClass(AppLoading,[{key:\"componentDidMount\",value:function componentDidMount(){this._isMounted=true;this.startLoadingAppResourcesAsync().catch(function(error){console.error(\"AppLoading threw an unexpected error when loading:\\n\"+error);});}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this._isMounted=false;}},{key:\"startLoadingAppResourcesAsync\",value:function startLoadingAppResourcesAsync(){return _regeneratorRuntime.async(function startLoadingAppResourcesAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:if('startAsync'in this.props){_context.next=2;break;}return _context.abrupt(\"return\");case 2:if('onFinish'in this.props){_context.next=4;break;}throw new Error('AppLoading onFinish prop is required if startAsync is provided');case 4:if('onError'in this.props){_context.next=6;break;}throw new Error('AppLoading onError prop is required if startAsync is provided');case 6:_context.prev=6;_context.next=9;return _regeneratorRuntime.awrap(this.props.startAsync());case 9:_context.next=16;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](6);if(this._isMounted){_context.next=15;break;}return _context.abrupt(\"return\");case 15:this.props.onError(_context.t0);case 16:_context.prev=16;if(this._isMounted){_context.next=19;break;}return _context.abrupt(\"return\");case 19:this.props.onFinish();return _context.finish(16);case 21:case\"end\":return _context.stop();}}},null,this,[[6,11,16,21]],Promise);}},{key:\"render\",value:function render(){return React.createElement(NativeAppLoading,Object.assign({},this.props));}}]);return AppLoading;}(React.Component);export{AppLoading as default};","map":{"version":3,"sources":["../src/AppLoading.tsx"],"names":[],"mappings":"ikCAAA,MAAO,CAAA,KAAP,KAAkB,OAAlB,CAEA,MAAO,CAAA,gBAAP,iC,GAwCqB,CAAA,U,uGAArB,qBAAA,4C,mCACE,MAAA,UAAA,CAAsB,KAAtB,CADF,aA+CC,C,wDA5CC,4BAAiB,CACf,KAAK,UAAL,CAAkB,IAAlB,CAEA,KAAK,6BAAL,GAAqC,KAArC,CAA2C,SAAA,KAAK,CAAG,CACjD,OAAO,CAAC,KAAR,wDAAqE,KAArE,EACD,CAFD,EAGD,C,oCAED,+BAAoB,CAClB,KAAK,UAAL,CAAkB,KAAlB,CACD,C,6CAEO,mLACA,cAAgB,MAAK,KADrB,oEAKA,YAAc,MAAK,KALnB,8BAME,IAAI,CAAA,KAAJ,CAAU,gEAAV,CANF,WASA,WAAa,MAAK,KATlB,8BAUE,IAAI,CAAA,KAAJ,CAAU,+DAAV,CAVF,yEAcE,KAAK,KAAL,CAAW,UAAX,EAdF,6FAgBC,KAAK,UAhBN,mEAmBJ,KAAK,KAAL,CAAW,OAAX,cAnBI,4BAqBC,KAAK,UArBN,mEAyBJ,KAAK,KAAL,CAAW,QAAX,GAzBI,2G,sBA6BR,iBAAM,CACJ,MAAO,CAAA,KAAA,CAAA,aAAA,CAAC,gBAAD,CAAiB,MAAA,CAAA,MAAA,CAAA,EAAA,CAAK,KAAK,KAAV,CAAjB,CAAP,CACD,C,wBA9CqC,KAAK,CAAC,S,SAAzB,U","sourcesContent":["import React from 'react';\n\nimport NativeAppLoading from './AppLoadingNativeWrapper';\n\ntype Props =\n  | {\n      /**\n       * Optional, you can do this process manually if you prefer.\n       * This is mainly for backwards compatibility and it is not recommended.\n       *\n       * When provided, requires providing `onError` prop as well.\n       * @deprecated\n       */\n      startAsync: () => Promise<void>;\n\n      /**\n       * If `startAsync` throws an error, it is caught and passed into the provided function.\n       * @deprecated\n       */\n      onError: (error: Error) => void;\n\n      /**\n       * Called when `startAsync` resolves or rejects.\n       * This should be used to set state and unmount the `AppLoading` component.\n       * @deprecated\n       */\n      onFinish: () => void;\n\n      /**\n       * Whether to hide the native splash screen as soon as you unmount the `AppLoading` component.\n       * Auto-hiding is enabled by default.\n       */\n      autoHideSplash?: boolean;\n    }\n  | {\n      /**\n       * Whether to hide the native splash screen as soon as you unmount the `AppLoading` component.\n       * Auto-hiding is enabled by default.\n       */\n      autoHideSplash?: boolean;\n    };\n\nexport default class AppLoading extends React.Component<Props> {\n  _isMounted: boolean = false;\n\n  componentDidMount() {\n    this._isMounted = true;\n\n    this.startLoadingAppResourcesAsync().catch(error => {\n      console.error(`AppLoading threw an unexpected error when loading:\\n${error}`);\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  private async startLoadingAppResourcesAsync() {\n    if (!('startAsync' in this.props)) {\n      return;\n    }\n\n    if (!('onFinish' in this.props)) {\n      throw new Error('AppLoading onFinish prop is required if startAsync is provided');\n    }\n\n    if (!('onError' in this.props)) {\n      throw new Error('AppLoading onError prop is required if startAsync is provided');\n    }\n\n    try {\n      await this.props.startAsync();\n    } catch (e) {\n      if (!this._isMounted) {\n        return;\n      }\n      this.props.onError(e);\n    } finally {\n      if (!this._isMounted) {\n        return;\n      }\n      // If we get to this point then we know that either there was no error, or the error was handled.\n      this.props.onFinish();\n    }\n  }\n\n  render() {\n    return <NativeAppLoading {...this.props} />;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}