{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";var _excluded=[\"url\",\"proxyOptions\"],_excluded2=[\"useProxy\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import _regeneratorRuntime from\"@babel/runtime/regenerator\";import*as WebBrowser from'expo-web-browser';import invariant from'invariant';import Platform from\"react-native-web/dist/exports/Platform\";import{CodeChallengeMethod,ResponseType}from\"./AuthRequest.types\";import{AuthError}from\"./Errors\";import*as PKCE from\"./PKCE\";import*as QueryParams from\"./QueryParams\";import sessionUrlProvider from\"./SessionUrlProvider\";import{TokenResponse}from\"./TokenRequest\";var _authLock=false;export var AuthRequest=function(){function AuthRequest(request){var _request$responseType,_request$state,_request$extraParams,_request$codeChalleng,_request$usePKCE;_classCallCheck(this,AuthRequest);this.url=null;this.responseType=(_request$responseType=request.responseType)!=null?_request$responseType:ResponseType.Code;this.clientId=request.clientId;this.redirectUri=request.redirectUri;this.scopes=request.scopes;this.clientSecret=request.clientSecret;this.prompt=request.prompt;this.state=(_request$state=request.state)!=null?_request$state:PKCE.generateRandom(10);this.extraParams=(_request$extraParams=request.extraParams)!=null?_request$extraParams:{};this.codeChallengeMethod=(_request$codeChalleng=request.codeChallengeMethod)!=null?_request$codeChalleng:CodeChallengeMethod.S256;this.usePKCE=(_request$usePKCE=request.usePKCE)!=null?_request$usePKCE:true;if(__DEV__){if(this.prompt&&this.extraParams.prompt){console.warn(\"`AuthRequest` `extraParams.prompt` will be overwritten by `prompt`.\");}if(this.clientSecret&&this.extraParams.client_secret){console.warn(\"`AuthRequest` `extraParams.client_secret` will be overwritten by `clientSecret`.\");}if(this.codeChallengeMethod&&this.extraParams.code_challenge_method){console.warn(\"`AuthRequest` `extraParams.code_challenge_method` will be overwritten by `codeChallengeMethod`.\");}}invariant(this.codeChallengeMethod!==CodeChallengeMethod.Plain,\"`AuthRequest` does not support `CodeChallengeMethod.Plain` as it's not secure.\");invariant(this.redirectUri,\"`AuthRequest` requires a valid `redirectUri`. Ex: \"+Platform.select({web:'https://yourwebsite.com/',default:'com.your.app:/oauthredirect'}));}_createClass(AuthRequest,[{key:\"getAuthRequestConfigAsync\",value:function getAuthRequestConfigAsync(){return _regeneratorRuntime.async(function getAuthRequestConfigAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!this.usePKCE){_context.next=3;break;}_context.next=3;return _regeneratorRuntime.awrap(this.ensureCodeIsSetupAsync());case 3:return _context.abrupt(\"return\",{responseType:this.responseType,clientId:this.clientId,redirectUri:this.redirectUri,scopes:this.scopes,clientSecret:this.clientSecret,codeChallenge:this.codeChallenge,codeChallengeMethod:this.codeChallengeMethod,prompt:this.prompt,state:this.state,extraParams:this.extraParams,usePKCE:this.usePKCE});case 4:case\"end\":return _context.stop();}}},null,this,null,Promise);}},{key:\"promptAsync\",value:function promptAsync(discovery){var _ref,url,proxyOptions,options,startUrl,returnUrl,result,useProxy,openOptions,_args2=arguments;return _regeneratorRuntime.async(function promptAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_ref=_args2.length>1&&_args2[1]!==undefined?_args2[1]:{},url=_ref.url,proxyOptions=_ref.proxyOptions,options=_objectWithoutProperties(_ref,_excluded);if(url){_context2.next=15;break;}if(this.url){_context2.next=14;break;}_context2.t0=this;_context2.t1=discovery;_context2.t2=_objectSpread;_context2.t3=_objectSpread({},options);_context2.t4={};_context2.next=10;return _regeneratorRuntime.awrap(this.makeAuthUrlAsync(discovery));case 10:_context2.t5=_context2.sent;_context2.t6={url:_context2.t5};_context2.t7=(0,_context2.t2)(_context2.t3,_context2.t4,_context2.t6);return _context2.abrupt(\"return\",_context2.t0.promptAsync.call(_context2.t0,_context2.t1,_context2.t7));case 14:url=this.url;case 15:invariant(url,'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.');startUrl=url;returnUrl=this.redirectUri;if(options.useProxy){returnUrl=sessionUrlProvider.getDefaultReturnUrl(proxyOptions==null?void 0:proxyOptions.path,proxyOptions);startUrl=sessionUrlProvider.getStartUrl(url,returnUrl);}if(!_authLock){_context2.next=22;break;}if(__DEV__){console.warn('Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.');}return _context2.abrupt(\"return\",{type:'locked'});case 22:_authLock=true;_context2.prev=23;useProxy=options.useProxy,openOptions=_objectWithoutProperties(options,_excluded2);_context2.next=27;return _regeneratorRuntime.awrap(WebBrowser.openAuthSessionAsync(startUrl,returnUrl,openOptions));case 27:result=_context2.sent;case 28:_context2.prev=28;_authLock=false;return _context2.finish(28);case 31:if(!(result.type==='opened')){_context2.next=33;break;}throw new Error('An unexpected error occurred');case 33:if(!(result.type!=='success')){_context2.next=35;break;}return _context2.abrupt(\"return\",{type:result.type});case 35:return _context2.abrupt(\"return\",this.parseReturnUrl(result.url));case 36:case\"end\":return _context2.stop();}}},null,this,[[23,,28,31]],Promise);}},{key:\"parseReturnUrl\",value:function parseReturnUrl(url){var _QueryParams$getQuery=QueryParams.getQueryParams(url),params=_QueryParams$getQuery.params,errorCode=_QueryParams$getQuery.errorCode;var state=params.state,_params$error=params.error,error=_params$error===void 0?errorCode:_params$error;var parsedError=null;var authentication=null;if(state!==this.state){parsedError=new AuthError({error:'state_mismatch',error_description:'Cross-Site request verification failed. Cached state and returned state do not match.'});}else if(error){parsedError=new AuthError(_objectSpread({error:error},params));}if(params.access_token){authentication=TokenResponse.fromQueryParams(params);}return{type:parsedError?'error':'success',error:parsedError,url:url,params:params,authentication:authentication,errorCode:errorCode};}},{key:\"makeAuthUrlAsync\",value:function makeAuthUrlAsync(discovery){var _request$scopes;var request,params,extra,query;return _regeneratorRuntime.async(function makeAuthUrlAsync$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return _regeneratorRuntime.awrap(this.getAuthRequestConfigAsync());case 2:request=_context3.sent;if(request.state){_context3.next=5;break;}throw new Error('Cannot make request URL without a valid `state` loaded');case 5:params={};if(request.codeChallenge){params.code_challenge=request.codeChallenge;}for(extra in request.extraParams){if(extra in request.extraParams){params[extra]=request.extraParams[extra];}}if(request.usePKCE&&request.codeChallengeMethod){params.code_challenge_method=request.codeChallengeMethod;}if(request.clientSecret){params.client_secret=request.clientSecret;}if(request.prompt){params.prompt=request.prompt;}params.redirect_uri=request.redirectUri;params.client_id=request.clientId;params.response_type=request.responseType;params.state=request.state;if((_request$scopes=request.scopes)!=null&&_request$scopes.length){params.scope=request.scopes.join(' ');}query=QueryParams.buildQueryString(params);this.url=discovery.authorizationEndpoint+\"?\"+query;return _context3.abrupt(\"return\",this.url);case 19:case\"end\":return _context3.stop();}}},null,this,null,Promise);}},{key:\"ensureCodeIsSetupAsync\",value:function ensureCodeIsSetupAsync(){var _await$PKCE$buildCode,codeVerifier,codeChallenge;return _regeneratorRuntime.async(function ensureCodeIsSetupAsync$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(!this.codeVerifier){_context4.next=2;break;}return _context4.abrupt(\"return\");case 2:_context4.next=4;return _regeneratorRuntime.awrap(PKCE.buildCodeAsync());case 4:_await$PKCE$buildCode=_context4.sent;codeVerifier=_await$PKCE$buildCode.codeVerifier;codeChallenge=_await$PKCE$buildCode.codeChallenge;this.codeVerifier=codeVerifier;this.codeChallenge=codeChallenge;case 9:case\"end\":return _context4.stop();}}},null,this,null,Promise);}}]);return AuthRequest;}();","map":{"version":3,"sources":["../src/AuthRequest.ts"],"names":[],"mappings":"+qCAAA,MAAO,GAAK,CAAA,UAAZ,KAA4B,kBAA5B,CACA,MAAO,CAAA,SAAP,KAAsB,WAAtB,C,6DAGA,OAGE,mBAHF,CAIE,YAJF,2BASA,OAAS,SAAT,gBACA,MAAO,GAAK,CAAA,IAAZ,cACA,MAAO,GAAK,CAAA,WAAZ,qBACA,MAAO,CAAA,kBAAP,4BACA,OAAS,aAAT,sBAEA,GAAI,CAAA,SAAS,CAAY,KAAzB,CASA,UAAa,CAAA,WAAb,YAmBE,qBAAY,OAAZ,CAAsC,wIAd/B,KAAA,GAAA,CAAqB,IAArB,CAeL,KAAK,YAAL,wBAAoB,OAAO,CAAC,YAA5B,8BAA4C,YAAY,CAAC,IAAzD,CACA,KAAK,QAAL,CAAgB,OAAO,CAAC,QAAxB,CACA,KAAK,WAAL,CAAmB,OAAO,CAAC,WAA3B,CACA,KAAK,MAAL,CAAc,OAAO,CAAC,MAAtB,CACA,KAAK,YAAL,CAAoB,OAAO,CAAC,YAA5B,CACA,KAAK,MAAL,CAAc,OAAO,CAAC,MAAtB,CACA,KAAK,KAAL,iBAAa,OAAO,CAAC,KAArB,uBAA8B,IAAI,CAAC,cAAL,CAAoB,EAApB,CAA9B,CACA,KAAK,WAAL,uBAAmB,OAAO,CAAC,WAA3B,6BAA0C,EAA1C,CACA,KAAK,mBAAL,wBAA2B,OAAO,CAAC,mBAAnC,8BAA0D,mBAAmB,CAAC,IAA9E,CAEA,KAAK,OAAL,mBAAe,OAAO,CAAC,OAAvB,yBAAkC,IAAlC,CAGA,GAAI,OAAJ,CAAa,CACX,GAAI,KAAK,MAAL,EAAe,KAAK,WAAL,CAAiB,MAApC,CAA4C,CAC1C,OAAO,CAAC,IAAR,wEACD,CACD,GAAI,KAAK,YAAL,EAAqB,KAAK,WAAL,CAAiB,aAA1C,CAAyD,CACvD,OAAO,CAAC,IAAR,qFAGD,CACD,GAAI,KAAK,mBAAL,EAA4B,KAAK,WAAL,CAAiB,qBAAjD,CAAwE,CACtE,OAAO,CAAC,IAAR,oGAGD,CACF,CAED,SAAS,CACP,KAAK,mBAAL,GAA6B,mBAAmB,CAAC,KAD1C,kFAAT,CAIA,SAAS,CACP,KAAK,WADE,sDAEkD,QAAQ,CAAC,MAAT,CAAgB,CACvE,GAAG,CAAE,0BADkE,CAEvE,OAAO,CAAE,6BAF8D,CAAhB,CAFlD,CAAT,CAOD,CA5DH,iEAiEE,4KACM,KAAK,OADX,0EAEU,KAAK,sBAAL,EAFV,yCAKS,CACL,YAAY,CAAE,KAAK,YADd,CAEL,QAAQ,CAAE,KAAK,QAFV,CAGL,WAAW,CAAE,KAAK,WAHb,CAIL,MAAM,CAAE,KAAK,MAJR,CAKL,YAAY,CAAE,KAAK,YALd,CAML,aAAa,CAAE,KAAK,aANf,CAOL,mBAAmB,CAAE,KAAK,mBAPrB,CAQL,MAAM,CAAE,KAAK,MARR,CASL,KAAK,CAAE,KAAK,KATP,CAUL,WAAW,CAAE,KAAK,WAVb,CAWL,OAAO,CAAE,KAAK,OAXT,CALT,uEAjEF,2BA2FE,qBACE,SADF,kRAEgE,EAFhE,CAEI,GAFJ,MAEI,GAFJ,CAES,YAFT,MAES,YAFT,CAE0B,OAF1B,6CAIO,GAJP,8BAKS,KAAK,GALd,wCAOa,IAPb,cAO8B,SAP9B,0DAQW,OARX,qEASmB,KAAK,gBAAL,CAAsB,SAAtB,CATnB,oDASQ,GATR,mIAOkB,WAPlB,uDAaI,GAAG,CAAG,KAAK,GAAX,CAbJ,QAiBE,SAAS,CACP,GADO,CAEP,wIAFO,CAAT,CAKI,QAtBN,CAsByB,GAtBzB,CAuBM,SAvBN,CAuB0B,KAAK,WAvB/B,CAwBE,GAAI,OAAO,CAAC,QAAZ,CAAsB,CACpB,SAAS,CAAG,kBAAkB,CAAC,mBAAnB,CAAuC,YAAvC,cAAuC,YAAY,CAAE,IAArD,CAA2D,YAA3D,CAAZ,CACA,QAAQ,CAAG,kBAAkB,CAAC,WAAnB,CAA+B,GAA/B,CAAoC,SAApC,CAAX,CACD,CA3BH,IA8BM,SA9BN,2BA+BI,GAAI,OAAJ,CAAa,CACX,OAAO,CAAC,IAAR,CACE,qIADF,EAGD,CAnCL,iCAqCW,CAAE,IAAI,CAAE,QAAR,CArCX,UAyCE,SAAS,CAAG,IAAZ,CAzCF,kBA6CY,QA7CZ,CA6CyC,OA7CzC,CA6CY,QA7CZ,CA6CyB,WA7CzB,0BA6CyC,OA7CzC,gEA8CmB,UAAU,CAAC,oBAAX,CAAgC,QAAhC,CAA0C,SAA1C,CAAqD,WAArD,CA9CnB,UA8CI,MA9CJ,0CAgDI,SAAS,CAAG,KAAZ,CAhDJ,yCAmDM,MAAM,CAAC,IAAP,GAAgB,QAnDtB,iCAqDU,IAAI,CAAA,KAAJ,CAAU,8BAAV,CArDV,cAuDM,MAAM,CAAC,IAAP,GAAgB,SAvDtB,6DAwDW,CAAE,IAAI,CAAE,MAAM,CAAC,IAAf,CAxDX,2CA2DS,KAAK,cAAL,CAAoB,MAAM,CAAC,GAA3B,CA3DT,kFA3FF,8BAyJE,wBAAe,GAAf,CAA0B,CACxB,0BAA8B,WAAW,CAAC,cAAZ,CAA2B,GAA3B,CAA9B,CAAQ,MAAR,uBAAQ,MAAR,CAAgB,SAAhB,uBAAgB,SAAhB,CACA,GAAQ,CAAA,KAAR,CAAqC,MAArC,CAAQ,KAAR,eAAqC,MAArC,CAAe,KAAf,CAAe,KAAf,wBAAuB,SAAvB,eAEA,GAAI,CAAA,WAAW,CAAqB,IAApC,CACA,GAAI,CAAA,cAAc,CAAyB,IAA3C,CACA,GAAI,KAAK,GAAK,KAAK,KAAnB,CAA0B,CAExB,WAAW,CAAG,GAAI,CAAA,SAAJ,CAAc,CAC1B,KAAK,CAAE,gBADmB,CAE1B,iBAAiB,CACf,uFAHwB,CAAd,CAAd,CAKD,CAPD,IAOO,IAAI,KAAJ,CAAW,CAChB,WAAW,CAAG,GAAI,CAAA,SAAJ,gBAAgB,KAAK,CAAL,KAAhB,EAA0B,MAA1B,EAAd,CACD,CACD,GAAI,MAAM,CAAC,YAAX,CAAyB,CACvB,cAAc,CAAG,aAAa,CAAC,eAAd,CAA8B,MAA9B,CAAjB,CACD,CAED,MAAO,CACL,IAAI,CAAE,WAAW,CAAG,OAAH,CAAa,SADzB,CAEL,KAAK,CAAE,WAFF,CAGL,GAAG,CAAH,GAHK,CAIL,MAAM,CAAN,MAJK,CAKL,cAAc,CAAd,cALK,CAQL,SAAS,CAAT,SARK,CAAP,CAUD,CAvLH,gCA8LE,0BAAuB,SAAvB,oOACwB,KAAK,yBAAL,EADxB,SACQ,OADR,mBAEO,OAAO,CAAC,KAFf,+BAE4B,IAAI,CAAA,KAAJ,CAAU,wDAAV,CAF5B,QAKQ,MALR,CAKyC,EALzC,CAOE,GAAI,OAAO,CAAC,aAAZ,CAA2B,CACzB,MAAM,CAAC,cAAP,CAAwB,OAAO,CAAC,aAAhC,CACD,CAGD,IAAW,KAAX,GAAoB,CAAA,OAAO,CAAC,WAA5B,CAAyC,CACvC,GAAI,KAAK,GAAI,CAAA,OAAO,CAAC,WAArB,CAAkC,CAChC,MAAM,CAAC,KAAD,CAAN,CAAgB,OAAO,CAAC,WAAR,CAAoB,KAApB,CAAhB,CACD,CACF,CAED,GAAI,OAAO,CAAC,OAAR,EAAmB,OAAO,CAAC,mBAA/B,CAAoD,CAClD,MAAM,CAAC,qBAAP,CAA+B,OAAO,CAAC,mBAAvC,CACD,CAED,GAAI,OAAO,CAAC,YAAZ,CAA0B,CACxB,MAAM,CAAC,aAAP,CAAuB,OAAO,CAAC,YAA/B,CACD,CAED,GAAI,OAAO,CAAC,MAAZ,CAAoB,CAClB,MAAM,CAAC,MAAP,CAAgB,OAAO,CAAC,MAAxB,CACD,CAGD,MAAM,CAAC,YAAP,CAAsB,OAAO,CAAC,WAA9B,CACA,MAAM,CAAC,SAAP,CAAmB,OAAO,CAAC,QAA3B,CACA,MAAM,CAAC,aAAP,CAAuB,OAAO,CAAC,YAA/B,CACA,MAAM,CAAC,KAAP,CAAe,OAAO,CAAC,KAAvB,CAEA,oBAAI,OAAO,CAAC,MAAZ,SAAI,gBAAgB,MAApB,CAA4B,CAC1B,MAAM,CAAC,KAAP,CAAe,OAAO,CAAC,MAAR,CAAe,IAAf,CAAoB,GAApB,CAAf,CACD,CAEK,KAxCR,CAwCgB,WAAW,CAAC,gBAAZ,CAA6B,MAA7B,CAxChB,CA0CE,KAAK,GAAL,CAAc,SAAS,CAAC,qBAAxB,KAAiD,KAAjD,CA1CF,iCA2CS,KAAK,GA3Cd,yEA9LF,sCA4OU,8NACF,KAAK,YADH,qHAMwC,IAAI,CAAC,cAAL,EANxC,8CAME,YANF,uBAME,YANF,CAMgB,aANhB,uBAMgB,aANhB,CAQN,KAAK,YAAL,CAAoB,YAApB,CACA,KAAK,aAAL,CAAqB,aAArB,CATM,sEA5OV","sourcesContent":["import * as WebBrowser from 'expo-web-browser';\nimport invariant from 'invariant';\nimport { Platform } from 'react-native';\n\nimport {\n  AuthRequestConfig,\n  AuthRequestPromptOptions,\n  CodeChallengeMethod,\n  ResponseType,\n  Prompt,\n} from './AuthRequest.types';\nimport { AuthSessionResult } from './AuthSession.types';\nimport { DiscoveryDocument } from './Discovery';\nimport { AuthError } from './Errors';\nimport * as PKCE from './PKCE';\nimport * as QueryParams from './QueryParams';\nimport sessionUrlProvider from './SessionUrlProvider';\nimport { TokenResponse } from './TokenRequest';\n\nlet _authLock: boolean = false;\n\ntype AuthDiscoveryDocument = Pick<DiscoveryDocument, 'authorizationEndpoint'>;\n\n/**\n * Implements an authorization request.\n *\n * [Section 4.1.1](https://tools.ietf.org/html/rfc6749#section-4.1.1)\n */\nexport class AuthRequest implements Omit<AuthRequestConfig, 'state'> {\n  /**\n   * Used for protection against [Cross-Site Request Forgery](https://tools.ietf.org/html/rfc6749#section-10.12).\n   */\n  public state: string;\n  public url: string | null = null;\n  public codeVerifier?: string;\n  public codeChallenge?: string;\n\n  readonly responseType: ResponseType | string;\n  readonly clientId: string;\n  readonly extraParams: Record<string, string>;\n  readonly usePKCE?: boolean;\n  readonly codeChallengeMethod: CodeChallengeMethod;\n  readonly redirectUri: string;\n  readonly scopes?: string[];\n  readonly clientSecret?: string;\n  readonly prompt?: Prompt;\n\n  constructor(request: AuthRequestConfig) {\n    this.responseType = request.responseType ?? ResponseType.Code;\n    this.clientId = request.clientId;\n    this.redirectUri = request.redirectUri;\n    this.scopes = request.scopes;\n    this.clientSecret = request.clientSecret;\n    this.prompt = request.prompt;\n    this.state = request.state ?? PKCE.generateRandom(10);\n    this.extraParams = request.extraParams ?? {};\n    this.codeChallengeMethod = request.codeChallengeMethod ?? CodeChallengeMethod.S256;\n    // PKCE defaults to true\n    this.usePKCE = request.usePKCE ?? true;\n\n    // Some warnings in development about potential confusing application code\n    if (__DEV__) {\n      if (this.prompt && this.extraParams.prompt) {\n        console.warn(`\\`AuthRequest\\` \\`extraParams.prompt\\` will be overwritten by \\`prompt\\`.`);\n      }\n      if (this.clientSecret && this.extraParams.client_secret) {\n        console.warn(\n          `\\`AuthRequest\\` \\`extraParams.client_secret\\` will be overwritten by \\`clientSecret\\`.`\n        );\n      }\n      if (this.codeChallengeMethod && this.extraParams.code_challenge_method) {\n        console.warn(\n          `\\`AuthRequest\\` \\`extraParams.code_challenge_method\\` will be overwritten by \\`codeChallengeMethod\\`.`\n        );\n      }\n    }\n\n    invariant(\n      this.codeChallengeMethod !== CodeChallengeMethod.Plain,\n      `\\`AuthRequest\\` does not support \\`CodeChallengeMethod.Plain\\` as it's not secure.`\n    );\n    invariant(\n      this.redirectUri,\n      `\\`AuthRequest\\` requires a valid \\`redirectUri\\`. Ex: ${Platform.select({\n        web: 'https://yourwebsite.com/',\n        default: 'com.your.app:/oauthredirect',\n      })}`\n    );\n  }\n\n  /**\n   * Load and return a valid auth request based on the input config.\n   */\n  async getAuthRequestConfigAsync(): Promise<AuthRequestConfig> {\n    if (this.usePKCE) {\n      await this.ensureCodeIsSetupAsync();\n    }\n\n    return {\n      responseType: this.responseType,\n      clientId: this.clientId,\n      redirectUri: this.redirectUri,\n      scopes: this.scopes,\n      clientSecret: this.clientSecret,\n      codeChallenge: this.codeChallenge,\n      codeChallengeMethod: this.codeChallengeMethod,\n      prompt: this.prompt,\n      state: this.state,\n      extraParams: this.extraParams,\n      usePKCE: this.usePKCE,\n    };\n  }\n\n  /**\n   * Prompt a user to authorize for a code.\n   *\n   * @param discovery\n   * @param promptOptions\n   */\n  async promptAsync(\n    discovery: AuthDiscoveryDocument,\n    { url, proxyOptions, ...options }: AuthRequestPromptOptions = {}\n  ): Promise<AuthSessionResult> {\n    if (!url) {\n      if (!this.url) {\n        // Generate a new url\n        return this.promptAsync(discovery, {\n          ...options,\n          url: await this.makeAuthUrlAsync(discovery),\n        });\n      }\n      // Reuse the preloaded url\n      url = this.url;\n    }\n\n    // Prevent accidentally starting to an empty url\n    invariant(\n      url,\n      'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.'\n    );\n\n    let startUrl: string = url!;\n    let returnUrl: string = this.redirectUri;\n    if (options.useProxy) {\n      returnUrl = sessionUrlProvider.getDefaultReturnUrl(proxyOptions?.path, proxyOptions);\n      startUrl = sessionUrlProvider.getStartUrl(url, returnUrl);\n    }\n    // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n    // support it this makes the behavior predictable.\n    if (_authLock) {\n      if (__DEV__) {\n        console.warn(\n          'Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.'\n        );\n      }\n\n      return { type: 'locked' };\n    }\n\n    // About to start session, set lock\n    _authLock = true;\n\n    let result: WebBrowser.WebBrowserAuthSessionResult;\n    try {\n      const { useProxy, ...openOptions } = options;\n      result = await WebBrowser.openAuthSessionAsync(startUrl, returnUrl, openOptions);\n    } finally {\n      _authLock = false;\n    }\n\n    if (result.type === 'opened') {\n      // This should never happen\n      throw new Error('An unexpected error occurred');\n    }\n    if (result.type !== 'success') {\n      return { type: result.type };\n    }\n\n    return this.parseReturnUrl(result.url);\n  }\n\n  parseReturnUrl(url: string): AuthSessionResult {\n    const { params, errorCode } = QueryParams.getQueryParams(url);\n    const { state, error = errorCode } = params;\n\n    let parsedError: AuthError | null = null;\n    let authentication: TokenResponse | null = null;\n    if (state !== this.state) {\n      // This is a non-standard error\n      parsedError = new AuthError({\n        error: 'state_mismatch',\n        error_description:\n          'Cross-Site request verification failed. Cached state and returned state do not match.',\n      });\n    } else if (error) {\n      parsedError = new AuthError({ error, ...params });\n    }\n    if (params.access_token) {\n      authentication = TokenResponse.fromQueryParams(params);\n    }\n\n    return {\n      type: parsedError ? 'error' : 'success',\n      error: parsedError,\n      url,\n      params,\n      authentication,\n\n      // Return errorCode for legacy\n      errorCode,\n    };\n  }\n\n  /**\n   * Create the URL for authorization.\n   *\n   * @param discovery\n   */\n  async makeAuthUrlAsync(discovery: AuthDiscoveryDocument): Promise<string> {\n    const request = await this.getAuthRequestConfigAsync();\n    if (!request.state) throw new Error('Cannot make request URL without a valid `state` loaded');\n\n    // Create a query string\n    const params: Record<string, string> = {};\n\n    if (request.codeChallenge) {\n      params.code_challenge = request.codeChallenge;\n    }\n\n    // copy over extra params\n    for (const extra in request.extraParams) {\n      if (extra in request.extraParams) {\n        params[extra] = request.extraParams[extra];\n      }\n    }\n\n    if (request.usePKCE && request.codeChallengeMethod) {\n      params.code_challenge_method = request.codeChallengeMethod;\n    }\n\n    if (request.clientSecret) {\n      params.client_secret = request.clientSecret;\n    }\n\n    if (request.prompt) {\n      params.prompt = request.prompt;\n    }\n\n    // These overwrite any extra params\n    params.redirect_uri = request.redirectUri;\n    params.client_id = request.clientId;\n    params.response_type = request.responseType!;\n    params.state = request.state;\n\n    if (request.scopes?.length) {\n      params.scope = request.scopes.join(' ');\n    }\n\n    const query = QueryParams.buildQueryString(params);\n    // Store the URL for later\n    this.url = `${discovery.authorizationEndpoint}?${query}`;\n    return this.url;\n  }\n\n  private async ensureCodeIsSetupAsync(): Promise<void> {\n    if (this.codeVerifier) {\n      return;\n    }\n\n    // This method needs to be resolved like all other native methods.\n    const { codeVerifier, codeChallenge } = await PKCE.buildCodeAsync();\n\n    this.codeVerifier = codeVerifier;\n    this.codeChallenge = codeChallenge;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}