{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";var _excluded=[\"windowFeatures\"];import _regeneratorRuntime from\"@babel/runtime/regenerator\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{useCallback,useMemo,useEffect,useState}from'react';import{AuthRequest}from\"./AuthRequest\";import{resolveDiscoveryAsync}from\"./Discovery\";export function useAutoDiscovery(issuerOrDiscovery){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),discovery=_useState2[0],setDiscovery=_useState2[1];useEffect(function(){resolveDiscoveryAsync(issuerOrDiscovery).then(function(discovery){setDiscovery(discovery);});},[issuerOrDiscovery]);return discovery;}export function useLoadedAuthRequest(config,discovery,AuthRequestInstance){var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),request=_useState4[0],setRequest=_useState4[1];var scopeString=useMemo(function(){var _config$scopes;return(_config$scopes=config.scopes)==null?void 0:_config$scopes.join(',');},[config.scopes]);var extraParamsString=useMemo(function(){return JSON.stringify(config.extraParams||{});},[config.extraParams]);useEffect(function(){var isMounted=true;if(discovery){var _request=new AuthRequestInstance(config);_request.makeAuthUrlAsync(discovery).then(function(){if(isMounted){setRequest(_request);}});}return function(){isMounted=false;};},[discovery==null?void 0:discovery.authorizationEndpoint,config.clientId,config.redirectUri,config.responseType,config.prompt,config.clientSecret,config.codeChallenge,config.state,config.usePKCE,scopeString,extraParamsString]);return request;}export function useAuthRequestResult(request,discovery){var customOptions=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),result=_useState6[0],setResult=_useState6[1];var promptAsync=useCallback(function _callee(){var _customOptions$window;var _ref,_ref$windowFeatures,windowFeatures,options,inputOptions,result,_args=arguments;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_ref=_args.length>0&&_args[0]!==undefined?_args[0]:{},_ref$windowFeatures=_ref.windowFeatures,windowFeatures=_ref$windowFeatures===void 0?{}:_ref$windowFeatures,options=_objectWithoutProperties(_ref,_excluded);if(!(!discovery||!request)){_context.next=3;break;}throw new Error('Cannot prompt to authenticate until the request has finished loading.');case 3:inputOptions=_objectSpread(_objectSpread(_objectSpread({},customOptions),options),{},{windowFeatures:_objectSpread(_objectSpread({},(_customOptions$window=customOptions.windowFeatures)!=null?_customOptions$window:{}),windowFeatures)});_context.next=6;return _regeneratorRuntime.awrap(request==null?void 0:request.promptAsync(discovery,inputOptions));case 6:result=_context.sent;setResult(result);return _context.abrupt(\"return\",result);case 9:case\"end\":return _context.stop();}}},null,null,null,Promise);},[request==null?void 0:request.url,discovery==null?void 0:discovery.authorizationEndpoint]);return[result,promptAsync];}export function useAuthRequest(config,discovery){var request=useLoadedAuthRequest(config,discovery,AuthRequest);var _useAuthRequestResult=useAuthRequestResult(request,discovery),_useAuthRequestResult2=_slicedToArray(_useAuthRequestResult,2),result=_useAuthRequestResult2[0],promptAsync=_useAuthRequestResult2[1];return[request,result,promptAsync];}","map":{"version":3,"sources":["../src/AuthRequestHooks.ts"],"names":[],"mappings":"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","sourcesContent":["import { useCallback, useMemo, useEffect, useState } from 'react';\n\nimport { AuthRequest } from './AuthRequest';\nimport { AuthRequestConfig, AuthRequestPromptOptions } from './AuthRequest.types';\nimport { AuthSessionResult } from './AuthSession.types';\nimport { DiscoveryDocument, IssuerOrDiscovery, resolveDiscoveryAsync } from './Discovery';\n\n/**\n * Fetch the discovery document from an OpenID Connect issuer.\n *\n * @param issuerOrDiscovery\n */\nexport function useAutoDiscovery(issuerOrDiscovery: IssuerOrDiscovery): DiscoveryDocument | null {\n  const [discovery, setDiscovery] = useState<DiscoveryDocument | null>(null);\n\n  useEffect(() => {\n    resolveDiscoveryAsync(issuerOrDiscovery).then(discovery => {\n      setDiscovery(discovery);\n    });\n  }, [issuerOrDiscovery]);\n\n  return discovery;\n}\n\nexport function useLoadedAuthRequest(\n  config: AuthRequestConfig,\n  discovery: DiscoveryDocument | null,\n  AuthRequestInstance: typeof AuthRequest\n): AuthRequest | null {\n  const [request, setRequest] = useState<AuthRequest | null>(null);\n  const scopeString = useMemo(() => config.scopes?.join(','), [config.scopes]);\n  const extraParamsString = useMemo(() => JSON.stringify(config.extraParams || {}), [\n    config.extraParams,\n  ]);\n  useEffect(\n    () => {\n      let isMounted = true;\n\n      if (discovery) {\n        const request = new AuthRequestInstance(config);\n        request.makeAuthUrlAsync(discovery).then(() => {\n          if (isMounted) {\n            // @ts-ignore\n            setRequest(request);\n          }\n        });\n      }\n      return () => {\n        isMounted = false;\n      };\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      discovery?.authorizationEndpoint,\n      config.clientId,\n      config.redirectUri,\n      config.responseType,\n      config.prompt,\n      config.clientSecret,\n      config.codeChallenge,\n      config.state,\n      config.usePKCE,\n      scopeString,\n      extraParamsString,\n    ]\n  );\n  return request;\n}\n\ntype PromptMethod = (options?: AuthRequestPromptOptions) => Promise<AuthSessionResult>;\n\nexport function useAuthRequestResult(\n  request: AuthRequest | null,\n  discovery: DiscoveryDocument | null,\n  customOptions: AuthRequestPromptOptions = {}\n): [AuthSessionResult | null, PromptMethod] {\n  const [result, setResult] = useState<AuthSessionResult | null>(null);\n\n  const promptAsync = useCallback(\n    async ({ windowFeatures = {}, ...options }: AuthRequestPromptOptions = {}) => {\n      if (!discovery || !request) {\n        throw new Error('Cannot prompt to authenticate until the request has finished loading.');\n      }\n      const inputOptions = {\n        ...customOptions,\n        ...options,\n        windowFeatures: {\n          ...(customOptions.windowFeatures ?? {}),\n          ...windowFeatures,\n        },\n      };\n      const result = await request?.promptAsync(discovery, inputOptions);\n      setResult(result);\n      return result;\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [request?.url, discovery?.authorizationEndpoint]\n  );\n\n  return [result, promptAsync];\n}\n\n/**\n * Load an authorization request.\n * Returns a loaded request, a response, and a prompt method.\n * When the prompt method completes then the response will be fulfilled.\n *\n * @param config\n * @param discovery\n */\nexport function useAuthRequest(\n  config: AuthRequestConfig,\n  discovery: DiscoveryDocument | null\n): [\n  AuthRequest | null,\n  AuthSessionResult | null,\n  (options?: AuthRequestPromptOptions) => Promise<AuthSessionResult>\n] {\n  const request = useLoadedAuthRequest(config, discovery, AuthRequest);\n  const [result, promptAsync] = useAuthRequestResult(request, discovery);\n  return [request, result, promptAsync];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}