{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport var userSlice = createSlice({\n  name: 'userData',\n  initialState: {\n    connected: false,\n    user: {\n      token: \"\",\n      email: \"\",\n      id: \"\",\n      pseudo: \"\"\n    },\n    spotify_token: \"\",\n    party: {\n      id: \"\",\n      code: \"\"\n    }\n  },\n  reducers: {\n    userConnected: function userConnected(state, action) {\n      state.connected = true;\n    },\n    setSpotifyToken: function setSpotifyToken(state, action) {\n      state.spotify_token = action.payload;\n    },\n    setCurrentPartyId: function setCurrentPartyId(state, action) {\n      state.party.id = action.payload.idParty;\n    },\n    setCurrentPartyCode: function setCurrentPartyCode(state, action) {\n      state.party.code = action.payload.codeParty;\n    },\n    setUser: function setUser(state, action) {\n      state.user.token = action.payload.token;\n      state.user.email = action.payload.email;\n      state.user.id = action.payload.id;\n      state.user.pseudo = action.payload.pseudo;\n    }\n  }\n});\nvar _userSlice$actions = userSlice.actions,\n    userConnected = _userSlice$actions.userConnected,\n    setSpotifyToken = _userSlice$actions.setSpotifyToken,\n    setUser = _userSlice$actions.setUser,\n    setCurrentPartyId = _userSlice$actions.setCurrentPartyId,\n    setCurrentPartyCode = _userSlice$actions.setCurrentPartyCode;\nexport { userConnected, setSpotifyToken, setUser, setCurrentPartyId, setCurrentPartyCode };\nexport default userSlice.reducer;","map":{"version":3,"sources":["/home/jeanningros/lug/redux/user.js"],"names":["createSlice","userSlice","name","initialState","connected","user","token","email","id","pseudo","spotify_token","party","code","reducers","userConnected","state","action","setSpotifyToken","payload","setCurrentPartyId","idParty","setCurrentPartyCode","codeParty","setUser","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,IAAMC,SAAS,GAAGD,WAAW,CAAC;AACnCE,EAAAA,IAAI,EAAE,UAD6B;AAEnCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,SAAS,EAAE,KADC;AAEZC,IAAAA,IAAI,EAAE;AACJC,MAAAA,KAAK,EAAE,EADH;AAEJC,MAAAA,KAAK,EAAE,EAFH;AAGJC,MAAAA,EAAE,EAAE,EAHA;AAIJC,MAAAA,MAAM,EAAE;AAJJ,KAFM;AAQZC,IAAAA,aAAa,EAAE,EARH;AASZC,IAAAA,KAAK,EAAE;AACLH,MAAAA,EAAE,EAAE,EADC;AAELI,MAAAA,IAAI,EAAE;AAFD;AATK,GAFqB;AAgBnCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,EAAE,uBAACC,KAAD,EAAQC,MAAR,EAAmB;AAChCD,MAAAA,KAAK,CAACX,SAAN,GAAkB,IAAlB;AACD,KAHO;AAIRa,IAAAA,eAAe,EAAE,yBAACF,KAAD,EAAQC,MAAR,EAAmB;AAClCD,MAAAA,KAAK,CAACL,aAAN,GAAsBM,MAAM,CAACE,OAA7B;AACD,KANO;AAORC,IAAAA,iBAAiB,EAAE,2BAACJ,KAAD,EAAQC,MAAR,EAAmB;AACpCD,MAAAA,KAAK,CAACJ,KAAN,CAAYH,EAAZ,GAAiBQ,MAAM,CAACE,OAAP,CAAeE,OAAhC;AACD,KATO;AAURC,IAAAA,mBAAmB,EAAE,6BAACN,KAAD,EAAQC,MAAR,EAAmB;AACtCD,MAAAA,KAAK,CAACJ,KAAN,CAAYC,IAAZ,GAAmBI,MAAM,CAACE,OAAP,CAAeI,SAAlC;AACD,KAZO;AAaRC,IAAAA,OAAO,EAAE,iBAACR,KAAD,EAAQC,MAAR,EAAmB;AAC1BD,MAAAA,KAAK,CAACV,IAAN,CAAWC,KAAX,GAAmBU,MAAM,CAACE,OAAP,CAAeZ,KAAlC;AACAS,MAAAA,KAAK,CAACV,IAAN,CAAWE,KAAX,GAAmBS,MAAM,CAACE,OAAP,CAAeX,KAAlC;AACAQ,MAAAA,KAAK,CAACV,IAAN,CAAWG,EAAX,GAAgBQ,MAAM,CAACE,OAAP,CAAeV,EAA/B;AACAO,MAAAA,KAAK,CAACV,IAAN,CAAWI,MAAX,GAAoBO,MAAM,CAACE,OAAP,CAAeT,MAAnC;AACD;AAlBO;AAhByB,CAAD,CAA7B;AAsCA,yBAA4FR,SAAS,CAACuB,OAAtG;AAAA,IAAQV,aAAR,sBAAQA,aAAR;AAAA,IAAuBG,eAAvB,sBAAuBA,eAAvB;AAAA,IAAwCM,OAAxC,sBAAwCA,OAAxC;AAAA,IAAiDJ,iBAAjD,sBAAiDA,iBAAjD;AAAA,IAAoEE,mBAApE,sBAAoEA,mBAApE;;AAEP,eAAepB,SAAS,CAACwB,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const userSlice = createSlice({\n  name: 'userData',\n  initialState: {\n    connected: false,\n    user: {\n      token: \"\", \n      email: \"\",\n      id: \"\",\n      pseudo: \"\",\n    },\n    spotify_token: \"\",\n    party: {\n      id: \"\",\n      code: \"\"\n    }\n  },\n  reducers: {\n    userConnected: (state, action) => {\n      state.connected = true;\n    },\n    setSpotifyToken: (state, action) => {\n      state.spotify_token = action.payload;\n    },\n    setCurrentPartyId: (state, action) => {\n      state.party.id = action.payload.idParty;\n    },\n    setCurrentPartyCode: (state, action) => {\n      state.party.code = action.payload.codeParty;\n    },\n    setUser: (state, action) => {\n      state.user.token = action.payload.token;\n      state.user.email = action.payload.email;\n      state.user.id = action.payload.id;\n      state.user.pseudo = action.payload.pseudo; \n    },\n  }\n})\n\nexport const { userConnected, setSpotifyToken, setUser, setCurrentPartyId, setCurrentPartyCode } = userSlice.actions\n\nexport default userSlice.reducer"]},"metadata":{},"sourceType":"module"}