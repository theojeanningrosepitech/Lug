{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/jeanningros/lug/components/ConnectService.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { userConnected, setSpotifyToken } from \"../redux/user\";\nimport * as Linking from 'expo-linking';\nimport * as WebBrowser from 'expo-web-browser';\nimport { makeRedirectUri, useAuthRequest, ResponseType } from 'expo-auth-session';\nWebBrowser.maybeCompleteAuthSession();\nvar discovery = {\n  authorizationEndpoint: 'https://accounts.spotify.com/authorize',\n  tokenEndpoint: 'https://accounts.spotify.com/api/token'\n};\n\nvar ConnectService = function ConnectService(_ref) {\n  var navigation = _ref.navigation;\n  var storeToken = useSelector(function (state) {\n    return state.user.spotify_token;\n  });\n  var dispatch = useDispatch();\n\n  var _useAuthRequest = useAuthRequest({\n    responseType: ResponseType.Token,\n    clientId: '67234dda13844207a07446c5f1672ca6',\n    scopes: ['user-read-recently-played', 'user-read-playback-position', 'user-read-email', 'playlist-modify-public', 'user-read-private', 'playlist-read-private', 'user-library-read', 'user-library-modify', 'user-top-read', 'playlist-read-collaborative', 'playlist-modify-private', 'ugc-image-upload', 'user-follow-read', 'user-follow-modify', 'user-read-playback-state', 'user-modify-playback-state', 'user-read-currently-playing'],\n    usePKCE: false,\n    redirectUri: makeRedirectUri({\n      native: Linking.getInitialURL\n    })\n  }, discovery),\n      _useAuthRequest2 = _slicedToArray(_useAuthRequest, 3),\n      request = _useAuthRequest2[0],\n      response = _useAuthRequest2[1],\n      promptAsync = _useAuthRequest2[2];\n\n  function getTrack() {\n    var token;\n    return _regeneratorRuntime.async(function getTrack$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            token = JSON.parse(storeToken);\n            console.log(\"--- getTrack() ---\");\n            fetch('https://api.spotify.com/v1/tracks/id=' + token, {\n              method: 'GET'\n            }).then(function (response) {\n              return response.json();\n            }).then(function (response) {\n              console.log(\"Server said: \" + response);\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  React.useEffect(function () {\n    console.log(\"response ======== \", response);\n\n    if ((response == null ? void 0 : response.type) === 'success') {\n      console.log(\"request  \" + request.url);\n      console.log(\"request  \" + request.codeChallenge);\n      var access_token = response.params.access_token;\n      console.log(access_token);\n      var token = access_token;\n      dispatch(setSpotifyToken(JSON.stringify(token)));\n    }\n  }, [response]);\n  var user = useSelector(function (state) {\n    return state.user.user;\n  });\n\n  if (response == null || response.type == \"dismiss\") {\n    console.log(\"user\", user);\n    return React.createElement(View, {\n      style: styles.container,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: styles.connectation,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, \" Connect via \"), React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, React.createElement(TouchableOpacity, {\n      onPress: function _callee() {\n        return _regeneratorRuntime.async(function _callee$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _regeneratorRuntime.awrap(promptAsync());\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }, React.createElement(Image, {\n      source: require(\"../assets/spotifyBlanc.png\"),\n      resizeMode: \"contain\",\n      style: styles.spotLogo,\n      imageStyle: styles.image_imageStyle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }))));\n  } else {\n    console.log(\"user\", user);\n    console.log(\"responsebbbbbb\", response);\n    return React.createElement(View, {\n      style: styles.container,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: styles.connectation,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, \" Connect via \"), React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }, React.createElement(TouchableOpacity, {\n      onPress: dispatch(userConnected()),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    }, React.createElement(Text, {\n      style: styles.connectation,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 12\n      }\n    }, \" GO \"))));\n  }\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: \"column\",\n    backgroundColor: '#120841',\n    padding: 50,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  spotLogo: {\n    width: 300,\n    height: 90\n  },\n  mediumLogo: {\n    width: 66,\n    height: 90\n  },\n  connectation: {\n    alignItems: 'center',\n    fontSize: 20,\n    color: \"white\",\n    fontWeight: \"bold\",\n    paddingBottom: 10\n  }\n});\nexport default ConnectService;","map":{"version":3,"sources":["/home/jeanningros/lug/components/ConnectService.js"],"names":["React","useState","useDispatch","useSelector","userConnected","setSpotifyToken","Linking","WebBrowser","makeRedirectUri","useAuthRequest","ResponseType","maybeCompleteAuthSession","discovery","authorizationEndpoint","tokenEndpoint","ConnectService","navigation","storeToken","state","user","spotify_token","dispatch","responseType","Token","clientId","scopes","usePKCE","redirectUri","native","getInitialURL","request","response","promptAsync","getTrack","token","JSON","parse","console","log","fetch","method","then","json","useEffect","type","url","codeChallenge","access_token","params","stringify","styles","container","connectation","require","spotLogo","image_imageStyle","StyleSheet","create","flex","flexDirection","backgroundColor","padding","alignItems","justifyContent","width","height","mediumLogo","fontSize","color","fontWeight","paddingBottom"],"mappings":"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","sourcesContent":["\nimport React, {useState} from 'react';\nimport { TouchableOpacity, Image, StyleSheet, Text, View, Button} from 'react-native';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { userConnected, setSpotifyToken } from '../redux/user';\nimport * as Linking from 'expo-linking';\n\nimport * as WebBrowser from 'expo-web-browser';\nimport { makeRedirectUri, useAuthRequest, ResponseType } from 'expo-auth-session';\n\nWebBrowser.maybeCompleteAuthSession();\n\nconst discovery = {\n  authorizationEndpoint: 'https://accounts.spotify.com/authorize',\n  tokenEndpoint: 'https://accounts.spotify.com/api/token',\n};\n\nconst ConnectService = ({ navigation }) => {\n  const storeToken = useSelector((state) => state.user.spotify_token);\n  const dispatch = useDispatch();\n ///TODO: FIX URI Redirection\n //const prefix = Linking.createURL('/spotifypage');\n\n  const [request, response, promptAsync] = useAuthRequest(\n    {\n      responseType: ResponseType.Token,\n      clientId: '67234dda13844207a07446c5f1672ca6',\n      scopes: ['user-read-recently-played', 'user-read-playback-position', 'user-read-email', 'playlist-modify-public', 'user-read-private', 'playlist-read-private', 'user-library-read', 'user-library-modify','user-top-read','playlist-read-collaborative','playlist-modify-private', 'ugc-image-upload', 'user-follow-read', 'user-follow-modify', 'user-read-playback-state', 'user-modify-playback-state', 'user-read-currently-playing'],\n      // In order to follow the \"Authorization Code Flow\" to fetch token after authorizationEndpoint\n      // this must be set to false\n      usePKCE: false,\n      // redirectUri: makeRedirectUri({\n      //   scheme: 'jukehome.app://callback'\n      //   }),\n//      redirectUri: makeRedirectUri({ scheme: 'com.jukehome' }) == null ? makeRedirectUri({ scheme: 'com.jukehome' }) : \"http://localhost:19006/callback/\"\n      redirectUri: makeRedirectUri({ native: Linking.getInitialURL })\n  \n    },\n    discovery\n  );\n  //console.log(\"prefix\", {prefix});\n\n  async function getTrack() {\n    // const token = JSON.parse(localStorage.getItem('token'));\n    const token = JSON.parse(storeToken);\n    console.log(\"--- getTrack() ---\");\n    fetch( 'https://api.spotify.com/v1/tracks/id=' + token,  {\n        method: 'GET',\n    })\n    .then(response => response.json())\n    .then((response) => {\n        console.log(\"Server said: \" + response);\n    });\n  }\n\n  React.useEffect(() => {\n    console.log(\"response ======== \", response);\n    if (response?.type === 'success') {\n      console.log(\"request  \"  +request.url);\n      console.log(\"request  \"  +request.codeChallenge);\n      const { access_token } = response.params;\n      console.log(access_token);\n      const token = access_token;\n      // localStorage.setItem('token', JSON.stringify(token));\n      dispatch(setSpotifyToken(JSON.stringify(token)));\n    }\n  }, [response]);\n\n  /// \n  const user = useSelector((state) => state.user.user);\n\n  if (response == null || response.type == \"dismiss\") {\n    console.log(\"user\", user)\n    return (\n      <View style={styles.container}>\n        \n        {/* <Button\n          title='connect to Spotify'\n          onPress={() => dispatch(userConnected())}\n        /> */}\n        <Text style={styles.connectation}> Connect via </Text>\n        <View>\n          <TouchableOpacity onPress={async ()=> {\n              await promptAsync();\n            \n            }\n            \n            }>\n            <Image\n              source={require(\"../assets/spotifyBlanc.png\")}\n              resizeMode=\"contain\"\n              style={styles.spotLogo}\n              imageStyle={styles.image_imageStyle}\n            /> \n          </TouchableOpacity>\n        </View>\n      </View>\n    );\n\n  } else {\n    console.log(\"user\", user)\n    console.log(\"responsebbbbbb\", response)\n    return (\n      <View style={styles.container}>\n        \n        {/* <Button\n          title='connect to Spotify'\n          onPress={() => dispatch(userConnected())}\n        /> */}\n        <Text style={styles.connectation}> Connect via </Text>\n        <View>\n          <TouchableOpacity onPress={\n            dispatch(userConnected())\n            }>\n           <Text style={styles.connectation}> GO </Text>\n\n          </TouchableOpacity>\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: \"column\",\n    backgroundColor: '#120841',\n    // fontFamily: 'Roboto',\n    padding: 50,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  spotLogo: {\n    width: 300,\n    height: 90,\n  },\n  mediumLogo: {\n    width: 66,\n    height: 90,\n  },\n\n  connectation: {\n    alignItems: 'center',\n    fontSize: 20,\n    color: \"white\",\n    fontWeight: \"bold\",\n    paddingBottom: 10,\n  }\n  \n\n});\n\nexport default ConnectService;"]},"metadata":{},"sourceType":"module"}